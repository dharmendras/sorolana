"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assembleTransaction = assembleTransaction;
var _stellarBase = require("stellar-base");
function assembleTransaction(raw, networkPassphrase, simulation) {
  if ("innerTransaction" in raw) {
    return assembleTransaction(raw.innerTransaction, networkPassphrase, simulation);
  }
  if (raw.operations.length !== 1 || raw.operations[0].type !== "invokeHostFunction") {
    throw new Error("unsupported operation type, must be only one InvokeHostFunctionOp in the transaction.");
  }
  const rawInvokeHostFunctionOp = raw.operations[0];
  if (!rawInvokeHostFunctionOp.functions || !simulation.results || rawInvokeHostFunctionOp.functions.length !== simulation.results.length) {
    throw new Error("preflight simulation results do not contain same count of HostFunctions that InvokeHostFunctionOp in the transaction has.");
  }
  const source = new _stellarBase.Account(raw.source, `${parseInt(raw.sequence, 10) - 1}`);
  const classicFeeNum = parseInt(raw.fee, 10) || 0;
  const minResourceFeeNum = parseInt(simulation.minResourceFee, 10) || 0;
  const txnBuilder = new _stellarBase.TransactionBuilder(source, {
    fee: (classicFeeNum + minResourceFeeNum).toString(),
    memo: raw.memo,
    networkPassphrase,
    timebounds: raw.timeBounds,
    ledgerbounds: raw.ledgerBounds,
    minAccountSequence: raw.minAccountSequence,
    minAccountSequenceAge: raw.minAccountSequenceAge,
    minAccountSequenceLedgerGap: raw.minAccountSequenceLedgerGap,
    extraSigners: raw.extraSigners
  });
  const authDecoratedHostFunctions = simulation.results.map((functionSimulationResult, i) => {
    const hostFn = rawInvokeHostFunctionOp.functions[i];
    hostFn.auth(buildContractAuth(functionSimulationResult.auth));
    return hostFn;
  });
  txnBuilder.addOperation(_stellarBase.Operation.invokeHostFunctions({
    functions: authDecoratedHostFunctions
  }));
  const sorobanTxData = _stellarBase.xdr.SorobanTransactionData.fromXDR(simulation.transactionData, "base64");
  txnBuilder.setSorobanData(sorobanTxData);
  return txnBuilder.build();
}
function buildContractAuth(auths) {
  const contractAuths = [];
  if (auths) {
    for (const authStr of auths) {
      contractAuths.push(_stellarBase.xdr.ContractAuth.fromXDR(authStr, "base64"));
    }
  }
  return contractAuths;
}